version: '3.8'

services:
  init:
    build:
      context: .
      dockerfile: Dockerfile.init
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./pgbouncer:/pgbouncer
      - ./postgres:/postgres
  postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
      POSTGRES_INITDB_ARGS: '--auth-host=scram-sha-256'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init-script.sql:/docker-entrypoint-initdb.d/10-init-script.sql
      - ./postgres/admin-tasks.sql:/docker-entrypoint-initdb.d/20-admin-tasks.sql
    ports:
      - '${BACKEND_PUBLIC_DB_PORT:-5432}:${POSTGRES_PORT:-5432}'
    depends_on:
      - init
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: edoburu/pgbouncer:latest
    container_name: pgbouncer
    environment:
      - DB_HOST=${POSTGRES_HOST:-postgres}
      - DB_PORT=${POSTGRES_PORT:-5432}
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=${PGBOUNCER_MAX_CLIENT_CONN:-1000}
      - DEFAULT_POOL_SIZE=${PGBOUNCER_DEFAULT_POOL_SIZE:-20}
      - AUTH_TYPE=scram-sha-256
      - AUTH_FILE=/etc/pgbouncer/userlist.txt
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini:ro
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
      - pgbouncer_users:/var/lib/pgbouncer
    ports:
      - '${BACKEND_PUBLIC_PGBOUNCER_PORT:-6432}:6432'
    depends_on:
      - init
      - postgres

  pgbouncer_updater:
    build:
      context: ./pgbouncer_updater
      dockerfile: Dockerfile
    volumes:
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
      - pgbouncer_users:/var/lib/pgbouncer
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - pgbouncer

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      POSTGRES_INTERNAL_DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/postgres
      BACKEND_PUBLIC_DB_HOST: ${BACKEND_PUBLIC_DB_HOST:-localhost}
      BACKEND_PUBLIC_DB_PORT: ${BACKEND_PUBLIC_DB_PORT:-5432}
      BACKEND_RECAPTCHA_SECRET_KEY: ${BACKEND_RECAPTCHA_SECRET_KEY}
      BACKEND_PUBLIC_PGBOUNCER_HOST: ${BACKEND_PUBLIC_PGBOUNCER_HOST:-localhost}
      BACKEND_PUBLIC_PGBOUNCER_PORT: ${BACKEND_PUBLIC_PGBOUNCER_PORT:-6432}
    volumes:
      - pgbouncer_users:/var/lib/pgbouncer
    depends_on:
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_started

  frontend:
    build: ./frontend
    environment:
      FRONTEND_RECAPTCHA_SITE_KEY: ${FRONTEND_RECAPTCHA_SITE_KEY}
      CLI_API_URL: ${CLI_API_URL}
    depends_on:
      - backend

  cron:
    build: ./cron
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432} # Default to 5432 if POSTGRES_PORT is not set. Needed this to avoid potential conflict with other Postgres instances running on the same host.
    depends_on:
      postgres:
        condition: service_healthy
      pgbouncer:
        condition: service_started
    volumes:
      - ./cron/logs:/var/log
      - pgbouncer_users:/etc/pgbouncer
      - /var/run/docker.sock:/var/run/docker.sock # To allow docker exec commands
    privileged: true # This allows the container to run Docker commands

volumes:
  postgres_data:
  pgbouncer_users:
